<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on Neo&#39;s Blog</title>
    <link>https://neofelisho.github.io/tags/redis/</link>
    <description>Recent content in redis on Neo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://neofelisho.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Azure Redis Connection Exception: SocketClosed</title>
      <link>https://neofelisho.github.io/blog/2018/2018-07-02-azure-redis-connection-socket-closed/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://neofelisho.github.io/blog/2018/2018-07-02-azure-redis-connection-socket-closed/</guid>
      <description>Problem There are several distributed webjobs in our system. Last weekend (late June 2018) there were many exceptions when our jobs tried to query data from specific one Redis server. But they could query other Redis servers normally.
These jobs all followed the suggestion from this Azure doc: Quickstart: Use Azure Redis Cache with a .NET application to connect to Redis server.
private static Lazy&amp;lt;ConnectionMultiplexer&amp;gt; lazyConnection = new Lazy&amp;lt;ConnectionMultiplexer&amp;gt;(() =&amp;gt; { string cacheConnection = ConfigurationManager.</description>
    </item>
    
    <item>
      <title>Test the effect of Redis connection setting: syncTimeout</title>
      <link>https://neofelisho.github.io/blog/2018/2018-05-22-test-redis-sync-timeout/</link>
      <pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://neofelisho.github.io/blog/2018/2018-05-22-test-redis-sync-timeout/</guid>
      <description>Story
As previous post mentioned, there were many redis timeout exceptions in our system. After we altered the minWorkerThread setting, we eliminated most of the HTTP 500 exceptions. But we still had many HTTP 401 exceptions and there was no problem if we lower the system loading from 10000 ppls to 1000 ppls concurrently.
Problem Lack async
Our system uses Redis as OAuth token storage, it looks kind of what Spring Framework does.</description>
    </item>
    
    <item>
      <title>Diagnostic timeout exceptions in StackExchange.Redis for Azure Redis Cache</title>
      <link>https://neofelisho.github.io/blog/2018/2018-05-19-diagnostic-timeout-exceptions-for-azure-redis/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://neofelisho.github.io/blog/2018/2018-05-19-diagnostic-timeout-exceptions-for-azure-redis/</guid>
      <description>Story There were many failed requests while we testing our system by VSTS cloud test. Concurrent 10000 users kept playing games or viewing reports. &amp;gt;Timeout performing HEXISTS XXX.YYY:OAuthTokenStorages:AccessToken, inst: 267, mgr: Inactive, err: never, queue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, clientName: RD__________F9, serverEndpoint: Unspecified/xxx.redis.cache.windows.net:6380, keyHashSlot: 1758, IOCP: (Busy=0,Free=1000,Min=1,Max=1000), WORKER: (Busy=45,Free=32722,Min=1,Max=32767) (Please take a look at this article for some common client-side issues that can cause timeouts: http://stackexchange.</description>
    </item>
    
  </channel>
</rss>