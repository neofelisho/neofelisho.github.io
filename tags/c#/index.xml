<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Neo&#39;s Blog</title>
    <link>https://neofelisho.github.io/tags/c#/</link>
    <description>Recent content in C# on Neo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 23 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://neofelisho.github.io/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Difference between C# and Java about derived class.</title>
      <link>https://neofelisho.github.io/blog/2019/2019-03-23-csharp-java-derived-class/</link>
      <pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://neofelisho.github.io/blog/2019/2019-03-23-csharp-java-derived-class/</guid>
      <description>A simple derived class example in Java I begin to develop Java recently. I had been asked a question about the behavior super/sub class. And, it&amp;rsquo;s not quite the same as I thought. For example we have this Java program using derived class:
public class Main { public static void main(String[] args) { One first = new Two(); Two second = (Two) first; One third = (One) second; first.method(); second.</description>
    </item>
    
    <item>
      <title>C# async/await and threads deadlock</title>
      <link>https://neofelisho.github.io/blog/2019/2019-03-18-csharp-async-await-and-thread-deadlock/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://neofelisho.github.io/blog/2019/2019-03-18-csharp-async-await-and-thread-deadlock/</guid>
      <description>A thread-safe async/await program First is a very simple program to simulate requesting I/O in the main function.
private static async Task Main(string[] args) { Console.WriteLine($&amp;quot;Start, {Thread.CurrentThread.ManagedThreadId}&amp;quot;); await GetIoTaskAsync(); await GetIoTaskAsync(); Console.WriteLine($&amp;quot;End, {Thread.CurrentThread.ManagedThreadId}&amp;quot;); Console.Read(); } private static async Task GetIoTaskAsync() { await Task.Run(() =&amp;gt; { Thread.Sleep(500); Console.WriteLine($&amp;quot;Waiting for I/O, {Thread.CurrentThread.ManagedThreadId}&amp;quot;); }); }  Execute this program and we can get the result like:
A unsafe program occurs thread deadlock Sometimes we can see something like below because someone want to invoke an async method in a sync function:</description>
    </item>
    
    <item>
      <title>Strange Issue With System.Net.Http 4.2.0.0 Not Found</title>
      <link>https://neofelisho.github.io/blog/2018/2018-09-20-strange-issue-with-system-net-http-4-2-0-0-not-found/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://neofelisho.github.io/blog/2018/2018-09-20-strange-issue-with-system-net-http-4-2-0-0-not-found/</guid>
      <description>https://stackoverflow.com/questions/47570912/strange-issue-with-system-net-http-4-2-0-0-not-found</description>
    </item>
    
    <item>
      <title>Memo for MongoDB</title>
      <link>https://neofelisho.github.io/blog/2018/2018-07-22-mongodb-getting-started/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://neofelisho.github.io/blog/2018/2018-07-22-mongodb-getting-started/</guid>
      <description> Reference  Indexing and MongoDB Query Performance MongoDB Driver Quick Tour MongoDB .NET Driver API Documentation New collection with index? POCO Documents in Bson Should I set all decimals to double in Bson? Dynamic create collections and indexes in C#  </description>
    </item>
    
  </channel>
</rss>